{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FEntwumS Project Documenation - An Open-Source FPGA Development Environment \u00b6 This project focuses on the development of an intuitive, open-source development environment for FPGAs. The goal is to create comprehensive design tools with simulation and visualization capabilities for implementing digital circuits. These docs should help you get started and contribute to this project. Project Structure \u00b6 FEntwumS can be divided into three subprojects: FPGA Design Tools : Visualization and simulation features for digital circuit development. Graphical System Builder and Circuit Design Tool : A graphical design tool for creating custom SoC configurations. AI Accelerator : Development of tools and accelerators designed for efficient processing of AI algorithms. This GitHub organization focuses on the first two subprojects. They are implemented as multiple plugins for OneWare Studio , an open-source IDE for FPGA design. Read more about general OneWare (plugin) development in A Brief Introduction to OneWare Studio and its Plugins .","title":"Home"},{"location":"#fentwums-project-documenation-an-open-source-fpga-development-environment","text":"This project focuses on the development of an intuitive, open-source development environment for FPGAs. The goal is to create comprehensive design tools with simulation and visualization capabilities for implementing digital circuits. These docs should help you get started and contribute to this project.","title":"FEntwumS Project Documenation - An Open-Source FPGA Development Environment"},{"location":"#project-structure","text":"FEntwumS can be divided into three subprojects: FPGA Design Tools : Visualization and simulation features for digital circuit development. Graphical System Builder and Circuit Design Tool : A graphical design tool for creating custom SoC configurations. AI Accelerator : Development of tools and accelerators designed for efficient processing of AI algorithms. This GitHub organization focuses on the first two subprojects. They are implemented as multiple plugins for OneWare Studio , an open-source IDE for FPGA design. Read more about general OneWare (plugin) development in A Brief Introduction to OneWare Studio and its Plugins .","title":"Project Structure"},{"location":"about/","text":"About \u00b6 This documentation is written in .md and generated via mkdocs .","title":"About"},{"location":"about/#about","text":"This documentation is written in .md and generated via mkdocs .","title":"About"},{"location":"design_tools/","text":"Design Tools \u00b6 The design tools offer an easy-to-use design flow to implement and debug digital circuits in OneWare. NetlistViewer \u00b6 The main feature is the NetlistViewer . It is built on top of the open-source tool yosys . Yosys parses the HDL design and outputs the netlist, which is then converted by the FEntwumS Backend into a layout. This layout is used by the Frontend to render a graph view. To make development with OneWare seamless, the FEntwumS Plugins add interactions to OneWare's Waveform Viewer. This way, the Waveform Viewer, Netlist Viewer, and Source Code are connected via mouse clicks, making it easy to jump from one view to another while debugging.","title":"Design Tools"},{"location":"design_tools/#design-tools","text":"The design tools offer an easy-to-use design flow to implement and debug digital circuits in OneWare.","title":"Design Tools"},{"location":"design_tools/#netlistviewer","text":"The main feature is the NetlistViewer . It is built on top of the open-source tool yosys . Yosys parses the HDL design and outputs the netlist, which is then converted by the FEntwumS Backend into a layout. This layout is used by the Frontend to render a graph view. To make development with OneWare seamless, the FEntwumS Plugins add interactions to OneWare's Waveform Viewer. This way, the Waveform Viewer, Netlist Viewer, and Source Code are connected via mouse clicks, making it easy to jump from one view to another while debugging.","title":"NetlistViewer"},{"location":"oneware/","text":"A brief introduction to OneWare Studio and its plugins \u00b6 OneWare is built on the .NET SDK 9.0 . It uses the Avalonia frontend framework. To start developing a plugin for OneWare, use the template, OneWare provides and follow the steps here: https://one-ware.com/docs/studio/plugins/write-plugin/. It is advised to use Intellij Rider to develop the .NET OneWare Plugins. It packs a comprehensive building/running and debugging workflow for .NETs module management. Prism \u00b6 OneWare currently uses Prism to enable loosely coupled development. This also enables plugin development for OneWare. The plugin registers itself in the container registry, when being loaded in OneWare. NuGet \u00b6 NuGet is a package manager for the Microsoft development platform, primarily used for managing .NET libraries and dependencies. It the process of incorporating third-party libraries into .NET projects by providing a central repository of reusable code packages. OneWare uses NuGet to provide its API via shared packages. This way your OneWare plugin development can always use the newest API OneWare provides for the interaction with your plugin. NuGet package management can also be done from Rider. If your plugin is dependend on another plugins NuGet packages, a local NuGet repositories often make sense. Since publishing NuGet repositories in the development of your plugin is often not desired. A local NuGet Feed can be created,then fetched from your .NET project. Look into it here .","title":"OneWare"},{"location":"oneware/#a-brief-introduction-to-oneware-studio-and-its-plugins","text":"OneWare is built on the .NET SDK 9.0 . It uses the Avalonia frontend framework. To start developing a plugin for OneWare, use the template, OneWare provides and follow the steps here: https://one-ware.com/docs/studio/plugins/write-plugin/. It is advised to use Intellij Rider to develop the .NET OneWare Plugins. It packs a comprehensive building/running and debugging workflow for .NETs module management.","title":"A brief introduction to OneWare Studio and its plugins"},{"location":"oneware/#prism","text":"OneWare currently uses Prism to enable loosely coupled development. This also enables plugin development for OneWare. The plugin registers itself in the container registry, when being loaded in OneWare.","title":"Prism"},{"location":"oneware/#nuget","text":"NuGet is a package manager for the Microsoft development platform, primarily used for managing .NET libraries and dependencies. It the process of incorporating third-party libraries into .NET projects by providing a central repository of reusable code packages. OneWare uses NuGet to provide its API via shared packages. This way your OneWare plugin development can always use the newest API OneWare provides for the interaction with your plugin. NuGet package management can also be done from Rider. If your plugin is dependend on another plugins NuGet packages, a local NuGet repositories often make sense. Since publishing NuGet repositories in the development of your plugin is often not desired. A local NuGet Feed can be created,then fetched from your .NET project. Look into it here .","title":"NuGet"}]}